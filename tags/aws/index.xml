<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Sean&#39;s Tech Blog</title>
    <link>http://hubbins.github.io/tags/aws/index.xml</link>
    <description>Recent content in Aws on Sean&#39;s Tech Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>blog@hubbins.com (Sean O&#39;Connor)</managingEditor>
    <webMaster>blog@hubbins.com (Sean O&#39;Connor)</webMaster>
    <atom:link href="http://hubbins.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building an IoT temperature sensor (Part 3 of 3)</title>
      <link>http://hubbins.github.io/post/sensor-part3/</link>
      <pubDate>Thu, 06 Jun 2019 12:00:00 -0500</pubDate>
      <author>blog@hubbins.com (Sean O&#39;Connor)</author>
      <guid>http://hubbins.github.io/post/sensor-part3/</guid>
      <description>&lt;p&gt;Build the AWS services to monitor the temperature and detect failures.
&lt;/p&gt;

&lt;p&gt;We want to accomplish a few main goals when developing the AWS services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detect if the temperature falls beneath a certain threshold.  If so, notify a number of people via SMS.&lt;/li&gt;
&lt;li&gt;Detect if the temperature sensor stops sending readings due to some malfunction.  Hardware, power, no wifi, etc&amp;hellip;  If so, notify the admin via SMS.&lt;/li&gt;
&lt;li&gt;Create a serverless environment with minimal running monthly costs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;detecting-sensor-failure&#34;&gt;Detecting sensor failure&lt;/h1&gt;

&lt;p&gt;What I intend to do is each time a sensor sends an update, I will update a file in an S3 bucket with the timestamp of the temperature reading.  The key will be the sensor id.&lt;/p&gt;

&lt;p&gt;Then I will have a process to periodically check the timestamp in the S3 bucket and if it&amp;rsquo;s older than some number of minutes, that means we haven&amp;rsquo;t received a timely update and notify the admin.&lt;/p&gt;

&lt;p&gt;We can accomplish this using a Cloudwatch event and a lambda function.  The lambda function will be fired by the Cloudwatch event every 15 minutes, passing the sensor id as a parameter.  The lambda will check the timestamp for the respective sensor by finding the value in the S3 bucket.  If the timestamp is older than, say, 30 minutes, then notify the admin.&lt;/p&gt;

&lt;h1 id=&#34;detecting-temperature-below-threshold-value&#34;&gt;Detecting temperature below threshold value&lt;/h1&gt;

&lt;p&gt;We will have a lambda, triggered by API Gateway, that reads a temperature from a sensor.  First, it writes the current timestamp to the S3 bucket for this sensor, to show the sensor is active.  Next, see if the temperature has fallen below a certain temperature.  If so, then notify a number of people (in this case, the condo board members) via SMS.  The SMS message will indicate the sensor id and the temperature reading.&lt;/p&gt;

&lt;h1 id=&#34;setting-up-aws&#34;&gt;Setting up AWS&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s setup a few simple things first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an S3 bucket, using default access (non-public), called &amp;ldquo;home-monitor&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Create a role &amp;ldquo;home-monitor-role&amp;rdquo; and attach the policies: AWSLambdaExecute (which includes S3) and AmazonSNSFullAccess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These policies are pretty wide open.  Sufficient for my purpose, but locking them down to only specific buckets and SNS actions is a good idea.&lt;/p&gt;

&lt;h1 id=&#34;sensor-failure-lambda&#34;&gt;Sensor failure lambda&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the sensor failure lambda code.  This is periodically called by a Cloudwatch event.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
import os
import datetime
import boto3
from dateutil import tz

def lambda_handler(event, context):
    
    # get sensor id from event
    sensor_id = str(event)
    # get time zones to convert message to local time
    from_zone = tz.gettz(&#39;UTC&#39;)
    to_zone = tz.gettz(&#39;America/Chicago&#39;)

    # read and parse the latest timestamp for this sensor
    s3_client = boto3.client(&amp;quot;s3&amp;quot;)
    obj = s3_client.get_object(Bucket=os.environ[&amp;quot;BUCKET&amp;quot;], Key=sensor_id)
    timestamp_str = obj[&amp;quot;Body&amp;quot;].read().decode(&#39;utf-8&#39;)
    timestamp_sensor = datetime.datetime.strptime(timestamp_str, &amp;quot;%Y-%m-%dT%H:%M:%S.%f&amp;quot;)
    
    timestamp_now = datetime.datetime.utcnow()
    timestamp_30 = timestamp_now - datetime.timedelta(seconds=1800)
    
    # if timestamp in bucket is more than 30 minutes old, some failure, notify
    if (timestamp_30 &amp;gt; timestamp_sensor):
        # send a text message to each phone number in the list
        phone_numbers = os.environ[&amp;quot;PHONE&amp;quot;].split(&amp;quot;|&amp;quot;)
        
        # convert sensor time to local time
        local_time = timestamp_sensor.replace(tzinfo=from_zone)

        sns_client = boto3.client(&amp;quot;sns&amp;quot;)

        for phone_number in phone_numbers:
            response = sns_client.publish(
                PhoneNumber=phone_number, 
                Message=sensor_id + &amp;quot; failed, last check in &amp;quot; + str(local_time.astimezone(to_zone)),
            )
    
    return {
        &#39;statusCode&#39;: 200,
        &#39;body&#39;: json.dumps(event)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the sensor id from the event passed in by the Cloudwatch event&lt;/li&gt;
&lt;li&gt;Get the sensor&amp;rsquo;s latest update timestamp from the S3 bucket&lt;/li&gt;
&lt;li&gt;If the sensor&amp;rsquo;s latest update is more than 30 minutes old, get a list of phone numbers from a lambda environment variable and send a text message indicating the sensor id that failed and its last checkin time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then setup a Cloudwatch event that triggers this lambda every 15 minutes, passing the sensor id as a parameter (Constant (JSON text)) with a value such as &amp;ldquo;garage&amp;rdquo; (with quotes).  You can also add multiple targets to the same Cloudwatch event, say with different sensor id&amp;rsquo;s.  This way, you can reuse a single Cloudwatch event to track multiple sensors.&lt;/p&gt;

&lt;h1 id=&#34;check-temperature&#34;&gt;Check temperature&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s look at the lambda code that handles the temperature threshold check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import json
import os
import datetime
import boto3

def lambda_handler(event, context):
    
    result = {}
    
    # get temperature threshold
    threshold = float(os.environ[&amp;quot;THRESHOLD&amp;quot;])
    
    # get temperature and sensor_id from POST body
    payload = json.loads(event[&amp;quot;body&amp;quot;])
    temperature = float(payload[&amp;quot;temperature&amp;quot;])
    sensor_id = payload[&amp;quot;sensor_id&amp;quot;]
    
    # write current timestamp to S3 bucket for this sensor
    timestamp = datetime.datetime.utcnow().isoformat()
    
    s3_client = boto3.client(&amp;quot;s3&amp;quot;)
    s3_client.put_object(Body=timestamp, Bucket=os.environ[&amp;quot;BUCKET&amp;quot;], Key=sensor_id)
    
    # if temperature is less than threshold, send a message with sensor name and temperature
    if temperature &amp;lt; threshold:
        sns_client = boto3.client(&amp;quot;sns&amp;quot;)
        
        # send a text message to each phone number in the list
        phone_numbers = os.environ[&amp;quot;PHONE&amp;quot;].split(&amp;quot;|&amp;quot;)

        for phone_number in phone_numbers:
            response = sns_client.publish(
                PhoneNumber=phone_number, 
                Message=sensor_id + &amp;quot; &amp;quot; + str(temperature) + &amp;quot; degrees&amp;quot;,
            )
        
        result[&amp;quot;sns&amp;quot;] = response    # return last text message result
    

    result[&amp;quot;timestamp&amp;quot;] = timestamp
    result[&amp;quot;temperature&amp;quot;] = temperature
    
    return {
        &#39;statusCode&#39;: 200,
        &#39;body&#39;: json.dumps(result)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the temperature threshold from a lambda environment variable, such as 40&lt;/li&gt;
&lt;li&gt;Get the sensor payload and extract the temperature and the sensor id&lt;/li&gt;
&lt;li&gt;Write the current timestamp to the S3 bucket for this sensor id&lt;/li&gt;
&lt;li&gt;If the temperature falls beneath the threshold, get a list of phone numbers from a lambda environment variable, and send a text message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create an API Gateway trigger for this lambda, with an API key.  Note the API key for use in the code that runs on the Pi.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;We now have all the pieces in place.&lt;/p&gt;

&lt;p&gt;We have the Pi running, sending a temperature reading to API Gateway every 15 minutes.&lt;/p&gt;

&lt;p&gt;We have a lambda triggered by API Gateway that updates the latest active timestamp for the sensor.  Then if the reported temperature falls beneath the threshold, notifies a number of people via SMS.&lt;/p&gt;

&lt;p&gt;We have a lambda triggered by a Cloudwatch event that detects sensor failure and notifies the administrator.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know what the monthly AWS bill will be to run this.  We&amp;rsquo;re talking about less than 100 API Gateway requests per day, half that many additional lambda request for failure checks, and a tiny amount of S3 storage.  Should be very minimal.  We&amp;rsquo;ll see!&lt;/p&gt;

&lt;p&gt;Overall, a fun project that introduced basic sensor usage on the Pi, some basic Pi programming, and some basic IoT with AWS web services using Python.  Also allowed me to brush up on my terrible soldering skills!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a photo of the &amp;ldquo;finished&amp;rdquo; product.  Imagine it with a plastic cover with a bunch of big holes drilled to allow for air flow.  It will be stuck to the wall somewhere near an electrical outlet in the garage.
&lt;img src=&#34;http://hubbins.github.io/images/sensor-final.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And here are some text messages I received from AWS when testing detecting sensor failures and temperature threshold tests.
&lt;img src=&#34;http://hubbins.github.io/images/readings.jpg&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an IoT temperature sensor (Part 2 of 3)</title>
      <link>http://hubbins.github.io/post/sensor-part2/</link>
      <pubDate>Wed, 05 Jun 2019 19:00:00 -0500</pubDate>
      <author>blog@hubbins.com (Sean O&#39;Connor)</author>
      <guid>http://hubbins.github.io/post/sensor-part2/</guid>
      <description>&lt;p&gt;Building the Pi code to post the temperature reading to the cloud.
&lt;/p&gt;

&lt;p&gt;Once the circuit is built, then writing the code to get the temperature value is very straightforward.&lt;/p&gt;

&lt;p&gt;The big benefit of using this particular digital temperature sensor is that the Pi has support for it directly.  Because the Pi handles the low-level communication with the sensor, we simply just have to read and parse a text file.  We don&amp;rsquo;t have to bother with any low-level GPIO programming.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;ll need a python app to do two things:&lt;br /&gt;
* Read the text file and parse the temperature value
* Send the temperature value to a remote http endpoint&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
import glob
import time
import urllib.request
import json

# define the AWS endpoint and API key
endpoint = &amp;quot;https://rpx74u5erj.execute-api.us-east-1.amazonaws.com/default/temperatureSensor&amp;quot;
apikey = &amp;quot;8MKmctQXTC7tm5C2svuq91a9lTkqmis1xxxxxx&amp;quot;

# unique sensor id
sensor_id = &amp;quot;garage&amp;quot;

# folder containing the text file
base_dir = &#39;/sys/bus/w1/devices/&#39;
device_folder = glob.glob(base_dir + &#39;28*&#39;)[0]
device_file = device_folder + &#39;/w1_slave&#39;

# read the lines of the text file into an array
def read_temp_raw():
    f = open(device_file, &#39;r&#39;)
    lines = f.readlines()
    f.close()
    return lines

# parse the temperature from the next file, retrying if the sensor is not ready(?)
def read_temp():
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != &#39;YES&#39;:
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find(&#39;t=&#39;)
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_c, temp_f


# round and print the temperature in F
temp_c, temp_f = read_temp()
temp_f = round(temp_f, 2)
print(temp_f)

# create the JSON payload to send to the http endpoint
payload = {}
payload[&amp;quot;sensor_id&amp;quot;] = sensor_id
payload[&amp;quot;temperature&amp;quot;] = temp_f

# POST to the endpoint with the JSON payload
req = urllib.request.Request(endpoint)
req.add_header(&#39;Content-Type&#39;, &#39;application/json; charset=utf-8&#39;)
jsondata = json.dumps(payload)
jsondataasbytes = jsondata.encode(&#39;utf-8&#39;)   # needs to be bytes
req.add_header(&#39;Content-Length&#39;, len(jsondataasbytes))
req.add_header(&amp;quot;x-api-key&amp;quot;, apikey)
response = urllib.request.urlopen(req, jsondataasbytes)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that some values such as http endpoint, api key, and sensor id are hard-coded in the script.  These values could also be kept in a configuration file, environment variables, etc&amp;hellip;  Because this is a small and simple script, it&amp;rsquo;s good enough to keep it self-contained.  This isn&amp;rsquo;t production code.&lt;/p&gt;

&lt;p&gt;Next we copy this file (app3.py) to the home folder of the default &amp;ldquo;pi&amp;rdquo; user /home/pi.  You can use SFTP or another means to transfer the file.  VS Code has a nice plugin (SFTP) that when you save the file to your PC, it will also save the file in a remote folder on the Pi using SFTP.&lt;/p&gt;

&lt;p&gt;Then we can can create a cron task to run the app every 15 minutes.  Run the command &amp;ldquo;sudo crontab -e&amp;rdquo; then add this to the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/15 * * * * python3 /home/pi/app3.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the last post in the series, we&amp;rsquo;ll build the AWS services.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an IoT temperature sensor (Part 1 of 3)</title>
      <link>http://hubbins.github.io/post/sensor-part1/</link>
      <pubDate>Mon, 03 Jun 2019 19:00:00 -0500</pubDate>
      <author>blog@hubbins.com (Sean O&#39;Connor)</author>
      <guid>http://hubbins.github.io/post/sensor-part1/</guid>
      <description>&lt;p&gt;How this project got started and steps to turn the Pi into a temperature sensing device.
&lt;/p&gt;

&lt;h1 id=&#34;the-polar-vortex&#34;&gt;The Polar Vortex&lt;/h1&gt;

&lt;p&gt;In Chicago in early 2019, the temperature dipped down to around -25 F.&lt;/p&gt;

&lt;p&gt;I live in a condo building that has an indoor parking garage on the ground floor.  One evening, during the Polar Vortex event, the building&amp;rsquo;s garage door got stuck open.&lt;/p&gt;

&lt;p&gt;The building management company had to make an emergency call to a lucky garage door repair guy, who probably charged triple the normal rate, who came out and determined that someone&amp;rsquo;s garage door opener transmitter was stuck &amp;ldquo;on&amp;rdquo;.  After determining where the transmitter was and unsticking it, the door closed normally.&lt;/p&gt;

&lt;p&gt;There are many exposed water pipes within the garage area and the condo board was concerned about pipes freezing during a similar event.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve regularly attended condo board meetings, and based on some comments I&amp;rsquo;ve made on various topics, the condo board has identified me as the &amp;ldquo;technical guy&amp;rdquo; in the building.  So, they asked me for some help in finding a solution that would sense an abnormally low temperature and notify them, via an &amp;ldquo;app&amp;rdquo;, that there was a problem.&lt;/p&gt;

&lt;p&gt;I looked around the interweb for various solutions.  I found that they all have some sort of limitations.  Cheaply made, lacking features, requires a monthly subscription to a monitoring web site, etc&amp;hellip;  Also, IoT (Internet of Things) devices tend to have a bad reputation around security and lack of firmware updates.  I didn&amp;rsquo;t want our garage sensor to become part of a bot net.&lt;/p&gt;

&lt;p&gt;I started thinking about the problem more and recalled that I had a Raspberry Pi B+ gathering dust that I&amp;rsquo;ve been meaning to use for a project for some time.&lt;/p&gt;

&lt;p&gt;I have an idea to periodically send temperature readings up to AWS.  If the temperature falls below a certain threshold, send a text message to a group of people, indicating the problem.  I also want some kind of heartbeat sensor to know if the device stops working.&lt;/p&gt;

&lt;p&gt;I can do the temperature sensing and sending the data with the Pi.  Let&amp;rsquo;s review the Pi capabilities and what we need to do to get the data into the cloud.&lt;/p&gt;

&lt;p&gt;Here are some specs I grabbed from a site:&lt;/p&gt;

&lt;h3 id=&#34;the-raspberry-pi-model-3-b-specs-35&#34;&gt;The Raspberry Pi model 3 B+ Specs ($35)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SOC: Broadcom BCM2837B0, Cortex-A53 (ARMv8) 64-bit SoC&lt;/li&gt;
&lt;li&gt;CPU: 1.4GHz 64-bit quad-core ARM Cortex-A53 CPU&lt;/li&gt;
&lt;li&gt;RAM: 1GB LPDDR2 SDRAM&lt;/li&gt;
&lt;li&gt;WIFI: Dual-band 802.11ac wireless LAN (2.4GHz and 5GHz ) and Bluetooth 4.2&lt;/li&gt;
&lt;li&gt;Ethernet: Gigabit Ethernet over USB 2.0 (max 300 Mbps). Power-over-Ethernet support (with separate PoE HAT). Improved PXE network and USB mass-storage booting.&lt;/li&gt;
&lt;li&gt;Thermal management: Yes&lt;/li&gt;
&lt;li&gt;Video: Yes – VideoCore IV 3D. Full-size HDMI&lt;/li&gt;
&lt;li&gt;Audio: Yes&lt;/li&gt;
&lt;li&gt;USB 2.0: 4 ports&lt;/li&gt;
&lt;li&gt;GPIO: 40-pin&lt;/li&gt;
&lt;li&gt;Power: 5V/2.5A DC power input&lt;/li&gt;
&lt;li&gt;Operating system support: Linux and Unix&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a very capable small computer that can run just about any linux-based software you can think of.  The key feature I needed was the 40-pin GPIO header.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hubbins.github.io/images/pi3bplus.png&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a somewhat less powerful Raspberry Pi Zero W with a much more attractive price tag:&lt;/p&gt;

&lt;h3 id=&#34;specs-for-the-raspberry-pi-zero-w-10&#34;&gt;Specs for the Raspberry Pi Zero W ($10)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Dimensions: 65mm × 30mm × 5mm&lt;/li&gt;
&lt;li&gt;SoC: Broadcom BCM2835&lt;/li&gt;
&lt;li&gt;CPU: ARM11 running at 1GHz&lt;/li&gt;
&lt;li&gt;RAM: 512MB&lt;/li&gt;
&lt;li&gt;Wireless: 2.4GHz 802.11n wireless LAN&lt;/li&gt;
&lt;li&gt;Bluetooth: Bluetooth Classic 4.1 and Bluetooth LE&lt;/li&gt;
&lt;li&gt;Power: 5V, supplied via micro USB connector&lt;/li&gt;
&lt;li&gt;Video &amp;amp; Audio: 1080P HD video &amp;amp; stereo audio via mini-HDMI connector&lt;/li&gt;
&lt;li&gt;Storage: MicroSD card&lt;/li&gt;
&lt;li&gt;Output: Micro USB&lt;/li&gt;
&lt;li&gt;GPIO: 40-pin GPIO, unpopulated&lt;/li&gt;
&lt;li&gt;Pins: Run mode, unpopulated; RCA composite, unpopulated&lt;/li&gt;
&lt;li&gt;Camera Serial Interface (CSI)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://hubbins.github.io/images/pizerow.png&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Pi Zero W is sufficient for my needs and uses less power.  The only downside is the GPIO header is unpopulated and I will need to solder one on.  But that sounds like a fun project, so why not.  I found my Radio Shack soldering pencil from the 90&amp;rsquo;s, some lead-laden solder, and I&amp;rsquo;m good to go.&lt;/p&gt;

&lt;h1 id=&#34;turning-the-pi-into-a-temperature-sensor&#34;&gt;Turning the Pi into a temperature sensor&lt;/h1&gt;

&lt;p&gt;The ultimate goal of the project is to turn the Pi into a temperature sensor that can periodically send the temperature reading to the cloud.  The first step is to create a circuit that includes a digital temperature sensor.  There are plenty of blog posting around on how to do this.  It&amp;rsquo;s one notch in complexity above a blinking LED light.  You can get digital temperature sensors from Amazon for 5 for $10 shipped.  Other than that, just need a small breadboard for prototyping and some jumper wires.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into detail on the circuit, as I mentioned, there are many &lt;a href=&#34;http://www.circuitbasics.com/raspberry-pi-ds18b20-temperature-sensor-tutorial/&#34;&gt;blog postings&lt;/a&gt; on that.  Here&amp;rsquo;s the detail on the circuit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hubbins.github.io/images/diagram.png&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The prototype ended up looking like this, ugly but it works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://hubbins.github.io/images/circuit.png&#34; alt=&#34;image alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The other end of the ribbon cable is connected to the GPIO port of the Pi (B+ in this case, but doesn&amp;rsquo;t matter).&lt;/p&gt;

&lt;p&gt;When I started this project, I assumed I would have to do some low-level programming to access the GPIO pins.  You do in the case of the blinking LED, for example.  In this case, the Pi knows about the digital temperature sensor.  You can load some drivers and the Pi will continually take readings and write them to a logical file on the Pi file system.  From a programming perspective, you merely have to read and parse a small text file.  Very easy.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a sample of what the text looks like:&lt;br /&gt;
3c 01 4b 46 7f ff 0c 10 36 : crc=36 YES&lt;br /&gt;
3c 01 4b 46 7f ff 0c 10 36 t=19750&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;t=19750&amp;rdquo; is the current temperature in Celsius * 1000.  Or 19.75 C or about 67 F.&lt;/p&gt;

&lt;p&gt;To setup the driver to read the temperature sensor, do the following steps:&lt;/p&gt;

&lt;p&gt;Do &amp;ldquo;sudo nano /boot/config/txt&amp;rdquo; and add a line at the end of the file (without quotes), &amp;ldquo;dtoverlay=w1-gpio,gpiopin=4&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Do &amp;ldquo;sudo nano /etc/modules&amp;rdquo; and add two lines to the end of the file (without quotes), &amp;ldquo;w1-gpio&amp;rdquo; and &amp;ldquo;w1-therm&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Reboot the Pi.  Do a quick check to see if it&amp;rsquo;s working:&lt;/p&gt;

&lt;p&gt;Change to the folder /sys/bus/w1/devices.  In that folder, there will be a folder called &amp;ldquo;28-*&amp;ldquo;, change to that folder.  In that folder &amp;ldquo;cat w1-slave&amp;rdquo; to see the thermometer reading.&lt;/p&gt;

&lt;p&gt;In the next post, I will review the code to parse the text file (from the blog post above) and send the data up to AWS for processing.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>